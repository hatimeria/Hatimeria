#!/usr/bin/env php
<?php

/*
 * This file is part of the Symfony Standard Edition.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

$rootDir = dirname(__DIR__);
$vendorDir = $rootDir.'/vendor';

array_shift($argv);
if (!isset($argv[0])) {
    exit(<<<EOF
Symfony2 vendors script management.

Specify a command to run:

 install: install vendors as specified in deps or deps.lock (recommended)
 lock:    locks current vendors
 stats:   show vendors statistics
 update:  update vendors to their latest versions (as specified in deps)

 --reinstall: Removes vendor before action (used only with install, update)

 -h:  Shows only hatimeria vendors (used with stats and install)
 -v:  Show witch files are uncommited (used only with stats)
 -nf: Doesn't fatch repository during repository check - can cause origin diff to be invalid (used only with stats)

EOF
    );
}

if (!in_array($command = array_shift($argv), array('install', 'update', 'lock', 'stats'))) {
    exit(sprintf("Command \"%s\" does not exist.\n", $command));
}

/*
 * Check wether this project is based on the Standard Edition that was
 * shipped with vendors or not.
 */
if (is_dir($vendorDir.'/symfony') && !is_dir($vendorDir.'/symfony/.git') && !in_array('--reinstall', $argv)) {
    exit(<<<EOF
Your project seems to be based on a Standard Edition that includes vendors.

Try to run ./bin/vendors install --reinstall


EOF
    );
}

if (!is_dir($vendorDir)) {
    mkdir($vendorDir, 0777, true);
}

if ("update" === $command) {
    die('If you aint freak, you cant touch this!!!');
}

if (in_array('-h', $argv) && in_array($command, array('lock', 'update'))) {
    die('-h can be used only with install and stats mode');
}

// versions
$versions = array();
if ('install' === $command && file_exists($rootDir.'/deps.lock')) {
    foreach (file($rootDir.'/deps.lock', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
        $parts = array_values(array_filter(explode(' ', $line)));
        if (2 !== count($parts)) {
            exit(sprintf('The deps version file is not valid (near "%s")', $line));
        }
        $versions[$parts[0]] = $parts[1];
    }
}

$newversions = array();
$stats       = array();
$deps        = parse_ini_file($rootDir.'/deps', true, INI_SCANNER_RAW);
if (false === $deps) {
    exit("The deps file is not valid ini syntax. Perhaps missing a trailing newline?\n");
}
foreach ($deps as $name => $dep) {
    $dep = array_map('trim', $dep);

    // install dir
    $installDir = isset($dep['target']) ? $vendorDir.'/'.$dep['target'] : $vendorDir.'/'.$name;

    if (in_array('-h', $argv) && (false === strpos(strtolower($name), 'hatimeria'))) {
        continue;
    }
    
    if ('install' === $command || 'update' === $command) {
        if (in_array('--reinstall', $argv)) {
            if (PHP_OS == 'WINNT') {
                system(sprintf('rmdir /S /Q %s', escapeshellarg(realpath($installDir))));
            } else {
                system(sprintf('rm -rf %s', escapeshellarg($installDir)));
            }
        }

        echo "> Installing/Updating $name\n";

        // url
        if (!isset($dep['git'])) {
            exit(sprintf('The "git" value for the "%s" dependency must be set.', $name));
        }

        $url = $dep['git'];
        if (in_array('--dev', $argv) && isset($dep['dev'])) {
            $url = $dep['dev'];
        }

        if (!is_dir($installDir)) {
            system(sprintf('git clone %s %s', escapeshellarg($url), escapeshellarg($installDir)));
        }

            // revision
        if (isset($versions[$name])) {
            $rev = $versions[$name];
        } else {
            $rev = isset($dep['version']) ? $dep['version'] : 'origin/HEAD';
        }

        system(sprintf('cd %s && git fetch origin && git reset --hard %s', escapeshellarg($installDir), escapeshellarg($rev)));
    } elseif ('stats' === $command) {
        $result = array();
        echo "> Checking $name\n";
        if (!in_array('-nf', $argv)) {
            system(sprintf('cd %s && git fetch origin', escapeshellarg($installDir)));
        }

        ob_start();
        system(sprintf('cd %s && git status -sb', escapeshellarg($installDir)));
        $stat = ob_get_clean();
        $stat = explode("\n", $stat);
        unset($stat[count($stat) - 1]); // last empty element

        preg_match("/\[(.*?)\]/", $stat[0], $preged);
        if (isset($preged[1])) {
            $result['version'] = $preged[1];
        }

        unset($stat[0]);
        if (count($stat)) {
            $result['files'] = array();
        }
        foreach ($stat as $file) {
            $result['files'][] = $file;
        }

        if (count($result)) {
            $stats[$name] = $result;
        }
    }

    if ('update' === $command || 'lock' === $command) {
        ob_start();
        system(sprintf('cd %s && git log -n 1 --format=%%H', escapeshellarg($installDir)));
        $newversions[] = trim($name.' '.ob_get_clean());
    }
}

if ('stats' === $command) {
    echo "\n";

    if (count($stats)) {
        foreach ($stats as $name => $stat) {
            echo '> ' . $name . "\n";
            if (isset($stat['version'])) {
                echo '  Version is ' . $stat['version'] . " commits\n";
            }
            if (isset($stat['files'])) {
                echo '  There are uncommited files!' . "\n";
                if (in_array('-v', $argv)) {
                    foreach ($stat['files'] as $file) {
                        echo '  # ' . $file . "\n";
                    }
                }
            }
        }
    } else {
        echo "Up to date\n";
    }
}

// update?
if ('update' === $command || 'lock' === $command) {
    file_put_contents($rootDir.'/deps.lock', implode("\n", $newversions));
}

if ('install' === $command || 'update' === $command) {
    // php on windows can't use the shebang line from system()
    $interpreter = PHP_OS == 'WINNT' ? 'php.exe' : '';

    $configDir = $rootDir . '/app/config';

    $custom = $configDir . '/custom.yml';
    if (!file_exists($custom)) {
        $example = $configDir . '/custom_example.yml';
        if (file_exists($example)) {
            copy($example, $custom);
        } else {
            file_put_contents($custom, '');
        }
    }

    // Update the bootstrap files
    system(sprintf('%s %s', $interpreter, escapeshellarg($rootDir.'/vendor/bundles/Sensio/Bundle/DistributionBundle/Resources/bin/build_bootstrap.php')));

    // Update assets
    system(sprintf('%s %s assets:install --symlink %s', $interpreter, escapeshellarg($rootDir.'/app/console'), escapeshellarg($rootDir.'/web/')));

    // Remove the cache
    system(sprintf('%s %s cache:clear --no-warmup', $interpreter, escapeshellarg($rootDir.'/app/console')));
}